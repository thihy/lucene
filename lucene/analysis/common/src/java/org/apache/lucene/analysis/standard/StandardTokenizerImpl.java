/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 7/15/12 1:57 AM */

package org.apache.lucene.analysis.standard;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * This class implements Word Break rules from the Unicode Text Segmentation 
 * algorithm, as specified in 
 * <a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>. 
 * <p/>
 * Tokens produced are of the following types:
 * <ul>
 *   <li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>
 *   <li>&lt;NUM&gt;: A number</li>
 *   <li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast
 *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>
 *   <li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>
 *   <li>&lt;HIRAGANA&gt;: A single hiragana character</li>
 * </ul>
 */

public final class StandardTokenizerImpl implements StandardTokenizerInterface {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\221\34\0\1\242\4\0\1\241\1\215\1\242\1\0\10\236"+
    "\1\230\1\236\1\214\1\241\1\0\1\225\3\0\1\203\2\234\1\216"+
    "\1\234\1\227\2\234\1\211\1\202\1\234\1\210\1\234\1\212\1\207"+
    "\1\172\2\234\1\213\1\206\1\226\1\204\4\234\4\0\1\205\1\0"+
    "\2\234\1\174\1\177\1\176\1\217\1\224\1\234\1\173\1\234\1\175"+
    "\1\220\1\234\1\222\1\223\1\201\4\234\1\200\5\234\57\0\1\234"+
    "\2\0\1\235\7\0\1\234\1\0\1\240\2\0\1\234\5\0\27\234"+
    "\1\0\37\234\1\0\u01ca\234\4\0\14\234\16\0\5\234\7\0\1\234"+
    "\1\0\1\234\21\0\160\235\5\234\1\0\2\234\2\0\4\234\1\241"+
    "\7\0\1\234\1\240\3\234\1\0\1\234\1\0\24\234\1\0\123\234"+
    "\1\0\213\234\1\0\7\235\236\234\11\0\46\234\2\0\1\234\7\0"+
    "\47\234\1\0\1\241\7\0\55\235\1\0\1\235\1\0\2\235\1\0"+
    "\2\235\1\0\1\235\10\0\33\234\5\0\4\234\1\240\13\0\5\235"+
    "\7\0\2\241\2\0\13\235\5\0\53\234\25\235\12\236\1\0\1\236"+
    "\1\241\1\0\2\234\1\235\143\234\1\0\1\234\7\235\1\235\1\0"+
    "\6\235\2\234\2\235\1\0\4\235\2\234\12\236\3\234\2\0\1\234"+
    "\17\0\1\235\1\234\1\235\36\234\33\235\2\0\131\234\13\235\1\234"+
    "\16\0\12\236\41\234\11\235\2\234\2\0\1\241\1\0\1\234\5\0"+
    "\26\234\4\235\1\234\11\235\1\234\3\235\1\234\5\235\22\0\31\234"+
    "\3\235\104\0\1\234\1\0\13\234\67\0\33\235\1\0\4\235\66\234"+
    "\3\235\1\234\22\235\1\234\7\235\12\234\2\235\2\0\12\236\1\0"+
    "\7\234\1\0\7\234\1\0\3\235\1\0\10\234\2\0\2\234\2\0"+
    "\26\234\1\0\7\234\1\0\1\234\3\0\4\234\2\0\1\235\1\234"+
    "\7\235\2\0\2\235\2\0\3\235\1\234\10\0\1\235\4\0\2\234"+
    "\1\0\3\234\2\235\2\0\12\236\2\234\17\0\3\235\1\0\6\234"+
    "\4\0\2\234\2\0\26\234\1\0\7\234\1\0\2\234\1\0\2\234"+
    "\1\0\2\234\2\0\1\235\1\0\5\235\4\0\2\235\2\0\3\235"+
    "\3\0\1\235\7\0\4\234\1\0\1\234\7\0\12\236\2\235\3\234"+
    "\1\235\13\0\3\235\1\0\11\234\1\0\3\234\1\0\26\234\1\0"+
    "\7\234\1\0\2\234\1\0\5\234\2\0\1\235\1\234\10\235\1\0"+
    "\3\235\1\0\3\235\2\0\1\234\17\0\2\234\2\235\2\0\12\236"+
    "\21\0\3\235\1\0\10\234\2\0\2\234\2\0\26\234\1\0\7\234"+
    "\1\0\2\234\1\0\5\234\2\0\1\235\1\234\7\235\2\0\2\235"+
    "\2\0\3\235\10\0\2\235\4\0\2\234\1\0\3\234\2\235\2\0"+
    "\12\236\1\0\1\234\20\0\1\235\1\234\1\0\6\234\3\0\3\234"+
    "\1\0\4\234\3\0\2\234\1\0\1\234\1\0\2\234\3\0\2\234"+
    "\3\0\3\234\3\0\14\234\4\0\5\235\3\0\3\235\1\0\4\235"+
    "\2\0\1\234\6\0\1\235\16\0\12\236\21\0\3\235\1\0\10\234"+
    "\1\0\3\234\1\0\27\234\1\0\12\234\1\0\5\234\3\0\1\234"+
    "\7\235\1\0\3\235\1\0\4\235\7\0\2\235\1\0\2\234\6\0"+
    "\2\234\2\235\2\0\12\236\22\0\2\235\1\0\10\234\1\0\3\234"+
    "\1\0\27\234\1\0\12\234\1\0\5\234\2\0\1\235\1\234\7\235"+
    "\1\0\3\235\1\0\4\235\7\0\2\235\7\0\1\234\1\0\2\234"+
    "\2\235\2\0\12\236\1\0\2\234\17\0\2\235\1\0\10\234\1\0"+
    "\3\234\1\0\51\234\2\0\1\234\7\235\1\0\3\235\1\0\4\235"+
    "\1\234\10\0\1\235\10\0\2\234\2\235\2\0\12\236\12\0\6\234"+
    "\2\0\2\235\1\0\22\234\3\0\30\234\1\0\11\234\1\0\1\234"+
    "\2\0\7\234\3\0\1\235\4\0\6\235\1\0\1\235\1\0\10\235"+
    "\22\0\2\235\15\0\60\244\1\245\2\244\7\245\5\0\7\244\10\245"+
    "\1\0\12\236\47\0\2\244\1\0\1\244\2\0\2\244\1\0\1\244"+
    "\2\0\1\244\6\0\4\244\1\0\7\244\1\0\3\244\1\0\1\244"+
    "\1\0\1\244\2\0\2\244\1\0\4\244\1\245\2\244\6\245\1\0"+
    "\2\245\1\244\2\0\5\244\1\0\1\244\1\0\6\245\2\0\12\236"+
    "\2\0\4\244\40\0\1\234\27\0\2\235\6\0\12\236\13\0\1\235"+
    "\1\0\1\235\1\0\1\235\4\0\2\235\10\234\1\0\44\234\4\0"+
    "\24\235\1\0\2\235\5\234\13\235\1\0\44\235\11\0\1\235\71\0"+
    "\53\244\24\245\1\244\12\236\6\0\6\244\4\245\4\244\3\245\1\244"+
    "\3\245\2\244\7\245\3\244\4\245\15\244\14\245\1\244\1\245\12\236"+
    "\4\245\2\244\46\234\1\0\1\234\5\0\1\234\2\0\53\234\1\0"+
    "\4\234\u0100\250\111\234\1\0\4\234\2\0\7\234\1\0\1\234\1\0"+
    "\4\234\2\0\51\234\1\0\4\234\2\0\41\234\1\0\4\234\2\0"+
    "\7\234\1\0\1\234\1\0\4\234\2\0\17\234\1\0\71\234\1\0"+
    "\4\234\2\0\103\234\2\0\3\235\40\0\20\234\20\0\125\234\14\0"+
    "\u026c\234\2\0\21\234\1\0\32\234\5\0\113\234\3\0\3\234\17\0"+
    "\15\234\1\0\4\234\3\235\13\0\22\234\3\235\13\0\22\234\2\235"+
    "\14\0\15\234\1\0\3\234\1\0\2\235\14\0\64\244\40\245\3\0"+
    "\1\244\4\0\1\244\1\245\2\0\12\236\41\0\3\235\2\0\12\236"+
    "\6\0\130\234\10\0\51\234\1\235\1\234\5\0\106\234\12\0\35\234"+
    "\3\0\14\235\4\0\14\235\12\0\12\236\36\244\2\0\5\244\13\0"+
    "\54\244\4\0\21\245\7\244\2\245\6\0\12\236\1\244\3\0\2\244"+
    "\40\0\27\234\5\235\4\0\65\244\12\245\1\0\35\245\2\0\1\235"+
    "\12\236\6\0\12\236\6\0\16\244\122\0\5\235\57\234\21\235\7\234"+
    "\4\0\12\236\21\0\11\235\14\0\3\235\36\234\15\235\2\234\12\236"+
    "\54\234\16\235\14\0\44\234\24\235\10\0\12\236\3\0\3\234\12\236"+
    "\44\234\122\0\3\235\1\0\25\235\4\234\1\235\4\234\3\235\2\234"+
    "\11\0\300\234\47\235\25\0\4\235\u0116\234\2\0\6\234\2\0\46\234"+
    "\2\0\6\234\2\0\10\234\1\0\1\234\1\0\1\234\1\0\1\234"+
    "\1\0\37\234\2\0\65\234\1\0\7\234\1\0\1\234\3\0\3\234"+
    "\1\0\7\234\3\0\4\234\2\0\6\234\4\0\15\234\5\0\3\234"+
    "\1\0\7\234\17\0\2\235\2\235\10\0\2\242\12\0\1\242\2\0"+
    "\1\240\2\0\5\235\20\0\2\243\3\0\1\241\17\0\1\243\13\0"+
    "\5\235\5\0\6\235\1\0\1\234\15\0\1\234\20\0\15\234\63\0"+
    "\41\235\21\0\1\234\4\0\1\234\2\0\12\234\1\0\1\234\3\0"+
    "\5\234\6\0\1\234\1\0\1\234\1\0\1\234\1\0\4\234\1\0"+
    "\13\234\2\0\4\234\5\0\5\234\4\0\1\234\21\0\51\234\u032d\0"+
    "\64\234\u0716\0\57\234\1\0\57\234\1\0\205\234\6\0\4\234\3\235"+
    "\2\234\14\0\46\234\1\0\1\234\5\0\1\234\2\0\70\234\7\0"+
    "\1\234\17\0\1\235\27\234\11\0\7\234\1\0\7\234\1\0\7\234"+
    "\1\0\7\234\1\0\7\234\1\0\7\234\1\0\7\234\1\0\7\234"+
    "\1\0\40\235\57\0\1\234\120\0\32\246\1\0\131\246\14\0\326\246"+
    "\57\0\1\234\1\0\1\246\31\0\11\246\4\235\2\235\1\0\5\237"+
    "\2\0\3\246\1\234\1\234\4\0\126\247\2\0\2\235\2\237\3\247"+
    "\133\237\1\0\4\237\5\0\51\234\3\0\136\250\21\0\33\234\65\0"+
    "\20\237\37\0\101\0\37\0\121\0\57\237\1\0\130\237\250\0\u19b6\246"+
    "\112\0\u51cd\246\63\0\u048d\234\103\0\56\234\2\0\u010d\234\3\0\20\234"+
    "\12\236\2\234\24\0\57\234\4\235\1\0\12\235\1\0\31\234\7\0"+
    "\1\235\120\234\2\235\45\0\11\234\2\0\147\234\2\0\4\234\1\0"+
    "\4\234\14\0\13\234\115\0\12\234\1\235\3\234\1\235\4\234\1\235"+
    "\27\234\5\235\30\0\64\234\14\0\2\235\62\234\21\235\13\0\12\236"+
    "\6\0\22\235\6\234\3\0\1\234\4\0\12\236\34\234\10\235\2\0"+
    "\27\234\15\235\14\0\35\250\3\0\4\235\57\234\16\235\16\0\1\234"+
    "\12\236\46\0\51\234\16\235\11\0\3\234\1\235\10\234\2\235\2\0"+
    "\12\236\6\0\33\244\1\245\4\0\60\244\1\245\1\244\3\245\2\244"+
    "\2\245\5\244\2\245\1\244\1\245\1\244\30\0\5\244\13\234\5\235"+
    "\2\0\3\234\2\235\12\0\6\234\2\0\6\234\2\0\6\234\11\0"+
    "\7\234\1\0\7\234\221\0\43\234\10\235\1\0\2\235\2\0\12\236"+
    "\6\0\u2ba4\250\14\0\27\250\4\0\61\250\4\0\1\44\1\40\1\67"+
    "\1\64\1\33\1\30\2\0\1\24\1\21\2\0\1\17\1\15\14\0"+
    "\1\3\1\6\20\0\1\156\7\0\1\111\1\10\5\0\1\1\1\232"+
    "\3\0\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"+
    "\1\163\1\163\1\163\1\163\1\163\1\231\1\163\1\163\1\163\1\163"+
    "\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"+
    "\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"+
    "\1\163\1\163\1\164\1\163\1\163\1\163\1\170\1\166\17\0\1\160"+
    "\u02c1\0\1\114\277\0\1\157\1\115\1\16\3\167\2\62\1\167\1\62"+
    "\2\167\1\36\21\167\2\106\7\117\1\116\7\117\7\102\1\37\1\102"+
    "\1\130\2\66\1\65\1\130\1\66\1\65\10\130\2\107\5\103\2\75"+
    "\5\103\1\22\10\53\5\23\3\41\12\147\20\41\3\63\32\43\1\42"+
    "\2\61\2\154\1\155\2\154\2\155\2\154\1\155\3\61\1\60\2\61"+
    "\12\110\1\126\1\50\1\45\1\110\6\50\1\45\13\50\31\61\7\50"+
    "\12\150\1\50\5\13\3\127\3\101\1\100\4\101\2\100\10\101\1\100"+
    "\7\35\1\34\2\35\7\101\16\127\1\141\4\152\1\4\4\151\1\4"+
    "\5\140\1\137\1\140\3\137\7\140\1\137\23\140\5\113\3\140\6\113"+
    "\2\113\6\112\5\112\3\134\2\101\7\133\36\101\4\133\5\101\5\127"+
    "\6\125\2\127\1\125\4\35\13\136\12\151\26\136\15\13\1\135\2\13"+
    "\1\233\3\142\1\13\2\142\5\161\4\142\4\162\1\161\3\162\1\161"+
    "\5\162\2\70\1\73\2\70\1\73\1\70\2\73\1\70\1\73\12\70"+
    "\1\73\4\5\1\144\1\143\1\145\1\12\3\165\1\145\2\165\1\131"+
    "\2\132\2\165\1\12\1\165\1\12\1\165\1\12\1\165\3\12\1\165"+
    "\2\12\1\165\1\12\2\165\1\12\1\165\1\12\1\165\1\12\1\165"+
    "\1\12\1\165\1\12\1\76\2\72\1\76\1\72\2\76\4\72\1\76"+
    "\7\72\1\76\4\72\1\76\4\72\1\165\1\12\1\165\12\31\1\57"+
    "\21\31\1\57\3\32\1\57\3\31\1\57\1\31\2\2\2\31\1\57"+
    "\15\124\4\47\4\54\1\146\1\56\10\146\7\54\6\165\4\25\1\27"+
    "\37\25\1\27\4\25\25\105\1\171\11\105\21\26\5\105\1\7\12\55"+
    "\5\105\6\104\4\76\1\77\1\26\5\123\12\121\17\123\1\74\3\71"+
    "\14\120\1\11\11\46\1\52\5\46\4\122\13\51\2\14\11\46\1\52"+
    "\31\46\1\52\4\11\4\46\2\52\2\153\1\20\5\153\52\20\u1900\0"+
    "\u016e\246\2\0\152\246\46\0\7\234\14\0\5\234\5\0\1\234\1\235"+
    "\12\234\1\0\15\234\1\0\5\234\1\0\1\234\1\0\2\234\1\0"+
    "\2\234\1\0\154\234\41\0\u016b\234\22\0\100\234\2\0\66\234\50\0"+
    "\14\234\4\0\20\235\1\241\2\0\1\240\1\241\13\0\7\235\14\0"+
    "\2\243\30\0\3\243\1\241\1\0\1\242\1\0\1\241\1\240\32\0"+
    "\5\234\1\0\207\234\2\0\1\235\7\0\1\242\4\0\1\241\1\0"+
    "\1\242\1\0\12\236\1\240\1\241\5\0\32\234\4\0\1\243\1\0"+
    "\32\234\13\0\70\237\2\235\37\250\3\0\6\250\2\0\6\250\2\0"+
    "\6\250\2\0\3\250\34\0\3\235\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\25\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\20\0\2\2\1\0\1\2\13\0"+
    "\1\2\7\0\1\3\36\0\1\2\57\0\1\2\11\0"+
    "\25\2\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\251\0\u0152\0\u01fb\0\u02a4\0\u034d\0\u03f6\0\u049f"+
    "\0\u0548\0\u05f1\0\u069a\0\u0743\0\u07ec\0\u0895\0\u093e\0\u09e7"+
    "\0\u0a90\0\u0b39\0\u0be2\0\u0c8b\0\u0d34\0\u0ddd\0\u0e86\0\u0f2f"+
    "\0\u0fd8\0\u1081\0\u112a\0\u11d3\0\u127c\0\u1325\0\u13ce\0\u1477"+
    "\0\u0152\0\u01fb\0\u1520\0\u15c9\0\u03f6\0\u049f\0\u0548\0\u05f1"+
    "\0\u1672\0\u171b\0\u17c4\0\u186d\0\u093e\0\u1916\0\u19bf\0\u1a68"+
    "\0\u1b11\0\u1bba\0\u1c63\0\u1d0c\0\u1db5\0\u034d\0\u1e5e\0\u1f07"+
    "\0\u07ec\0\u1fb0\0\u2059\0\u2102\0\u21ab\0\u2254\0\u0fd8\0\u22fd"+
    "\0\u23a6\0\u244f\0\u24f8\0\u25a1\0\u264a\0\u26f3\0\u279c\0\u2845"+
    "\0\u28ee\0\u2997\0\u2a40\0\u2ae9\0\u2b92\0\u2c3b\0\u2ce4\0\u2d8d"+
    "\0\u2e36\0\u2edf\0\u2f88\0\u3031\0\u30da\0\u3183\0\u322c\0\u32d5"+
    "\0\u337e\0\u3427\0\u34d0\0\u3579\0\u3622\0\u36cb\0\u3774\0\u381d"+
    "\0\u38c6\0\u396f\0\u3a18\0\u3ac1\0\u3b6a\0\u3c13\0\u3cbc\0\u3d65"+
    "\0\u3e0e\0\u3eb7\0\u3f60\0\u4009\0\u40b2\0\u415b\0\u4204\0\u42ad"+
    "\0\u4356\0\u43ff\0\u44a8\0\u4551\0\u45fa\0\u46a3\0\u474c\0\u47f5"+
    "\0\u489e\0\u4947\0\u49f0\0\u4a99\0\u4b42\0\u4beb\0\u4c94\0\u4d3d"+
    "\0\u4de6\0\u4e8f\0\u4f38\0\u4fe1\0\u508a\0\u5133\0\u51dc\0\u5285"+
    "\0\u532e\0\u53d7\0\u5480\0\u5529\0\u55d2\0\u567b\0\u5724\0\u57cd"+
    "\0\u5876\0\u591f\0\u59c8\0\u5a71\0\u5b1a\0\u5bc3\0\u5c6c\0\u5d15"+
    "\0\u5dbe\0\u5e67\0\u5f10\0\u5fb9\0\u6062\0\u610b\0\u61b4\0\u625d"+
    "\0\u6306\0\u63af\0\u6458\0\u6501\0\u65aa\0\u6653\0\u66fc\0\u67a5"+
    "\0\u684e\0\u68f7\0\u69a0\0\u6a49\0\u6af2\0\u6b9b\0\u6c44\0\u6ced"+
    "\0\u6d96\0\u6e3f\0\u6ee8\0\u6f91\0\u703a\0\u70e3\0\u718c\0\u7235"+
    "\0\u72de\0\u7387\0\u7430\0\u74d9\0\u7582\0\u762b\0\u76d4\0\u777d"+
    "\0\u7826\0\u78cf\0\u7978\0\u7a21\0\u7aca\0\u7b73\0\u7c1c\0\u7cc5"+
    "\0\u7d6e\0\u7e17\0\u7ec0\0\u0be2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\2\2\1\5\1\2\1\6"+
    "\4\2\1\7\1\2\1\10\1\2\1\11\2\2\1\12"+
    "\3\2\1\13\2\2\1\14\4\2\1\15\3\2\1\16"+
    "\17\2\1\17\2\2\1\20\66\2\1\21\1\2\1\22"+
    "\2\2\1\23\1\24\1\2\1\25\1\2\1\26\1\2"+
    "\1\27\12\30\1\31\6\30\2\2\3\30\1\2\3\30"+
    "\1\2\2\30\1\32\1\2\1\33\1\2\1\30\1\2"+
    "\1\32\1\34\3\2\1\31\2\35\1\36\1\37\1\40"+
    "\253\0\1\30\2\0\1\30\4\0\1\30\16\0\1\30"+
    "\15\0\1\30\20\0\1\30\1\0\1\30\31\0\1\30"+
    "\4\0\1\30\10\0\2\30\15\0\2\30\50\0\1\30"+
    "\21\0\2\30\5\0\1\30\2\0\1\30\3\0\2\30"+
    "\10\0\4\30\1\0\3\30\1\0\1\30\2\0\1\30"+
    "\2\0\1\30\4\0\4\30\1\0\2\30\1\0\1\30"+
    "\2\0\1\30\1\0\1\30\2\0\4\30\2\0\3\30"+
    "\1\0\2\30\1\0\3\30\5\0\4\30\2\0\10\30"+
    "\1\0\1\30\2\0\4\30\1\0\2\30\1\0\1\30"+
    "\1\0\2\30\4\0\1\30\43\0\1\30\24\0\1\30"+
    "\4\0\1\30\11\0\1\30\22\0\1\30\3\0\1\30"+
    "\27\0\1\30\63\0\1\30\64\0\1\30\3\0\4\30"+
    "\1\0\1\30\1\0\1\32\2\0\1\30\1\0\2\30"+
    "\2\0\2\30\2\0\3\30\1\0\1\30\1\0\1\30"+
    "\2\0\4\30\1\0\3\30\1\0\1\30\1\0\3\30"+
    "\1\0\2\30\1\0\4\30\1\0\2\30\2\0\10\30"+
    "\1\0\2\30\1\0\11\30\1\0\10\30\1\0\13\30"+
    "\1\32\1\0\1\30\1\0\1\30\1\0\2\30\2\0"+
    "\1\30\1\0\1\30\43\0\1\30\33\0\1\30\17\0"+
    "\1\30\23\0\1\30\23\0\1\30\6\0\3\30\37\0"+
    "\1\30\7\0\1\30\63\0\1\30\1\0\2\30\1\0"+
    "\1\30\1\0\4\30\1\0\1\30\1\0\1\30\1\0"+
    "\2\30\1\0\3\30\1\0\2\30\1\0\4\30\1\0"+
    "\3\30\1\0\17\30\1\0\2\30\1\0\21\30\1\0"+
    "\2\30\1\0\41\30\1\0\1\30\1\0\2\30\2\0"+
    "\1\30\1\0\1\30\1\0\1\30\41\0\1\30\33\0"+
    "\1\30\3\0\2\30\12\0\2\30\13\0\1\30\6\0"+
    "\1\30\2\0\2\30\6\0\1\30\4\0\2\30\2\0"+
    "\2\30\5\0\3\30\10\0\1\30\26\0\1\30\7\0"+
    "\1\30\63\0\1\30\1\0\2\30\1\0\1\30\2\0"+
    "\2\30\2\0\1\30\3\0\2\30\1\0\3\30\1\0"+
    "\2\30\1\0\4\30\1\0\3\30\1\0\1\30\1\0"+
    "\2\30\2\0\11\30\1\0\2\30\1\0\1\30\1\0"+
    "\2\30\1\0\14\30\1\0\2\30\1\0\3\30\1\0"+
    "\1\30\1\0\30\30\1\0\2\30\1\0\1\30\1\0"+
    "\2\30\2\0\1\30\1\0\1\30\1\0\1\30\41\0"+
    "\1\30\17\0\1\30\26\0\2\30\23\0\1\32\1\30"+
    "\66\0\1\32\106\0\1\32\27\0\4\30\2\0\2\30"+
    "\14\0\3\30\15\0\3\30\3\0\1\30\7\0\2\30"+
    "\13\0\1\30\13\0\4\32\1\0\2\30\11\0\1\30"+
    "\77\0\1\30\3\0\2\30\12\0\2\30\1\0\3\30"+
    "\7\0\1\30\6\0\2\30\1\0\2\30\6\0\1\30"+
    "\4\0\2\30\2\0\2\30\5\0\3\30\10\0\1\30"+
    "\16\0\1\30\4\0\2\32\1\0\1\30\7\0\1\30"+
    "\63\0\1\30\4\0\1\30\6\0\1\30\3\0\1\30"+
    "\6\0\1\30\5\0\1\30\2\0\2\30\1\0\17\30"+
    "\2\0\1\30\13\0\7\30\2\0\1\30\1\0\1\30"+
    "\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\1\30\6\0\2\30\5\0\1\30\1\0\1\30"+
    "\2\0\3\30\1\0\1\30\7\0\1\30\1\0\1\30"+
    "\75\0\1\30\17\0\2\30\22\0\1\30\2\0\2\30"+
    "\13\0\1\30\3\0\2\30\5\0\3\30\10\0\1\30"+
    "\26\0\1\30\7\0\1\30\70\0\1\30\6\0\1\30"+
    "\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"+
    "\5\0\3\30\3\0\1\30\3\0\2\30\2\0\2\30"+
    "\4\0\1\30\10\0\1\30\4\0\1\30\2\0\1\30"+
    "\4\0\1\30\1\0\1\30\41\0\1\30\132\0\1\37"+
    "\41\0\1\34\75\0\1\36\6\0\1\36\2\0\1\36"+
    "\3\0\2\36\10\0\4\36\1\0\3\36\1\0\1\36"+
    "\2\0\1\36\2\0\1\36\4\0\4\36\1\0\2\36"+
    "\6\0\1\36\2\0\4\36\2\0\3\36\1\0\2\36"+
    "\1\0\3\36\5\0\4\36\2\0\10\36\4\0\4\36"+
    "\1\0\2\36\1\0\1\36\1\0\2\36\4\0\1\36"+
    "\43\0\1\36\17\0\1\36\1\0\2\36\1\0\1\36"+
    "\1\0\4\36\1\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\0\3\36\1\0\2\36\1\0\4\36\1\0\3\36"+
    "\1\0\17\36\1\0\2\36\1\0\21\36\1\0\2\36"+
    "\1\0\41\36\1\0\1\36\1\0\2\36\2\0\1\36"+
    "\1\0\1\36\1\0\1\36\41\0\1\36\17\0\1\36"+
    "\1\0\2\36\1\0\1\36\1\0\4\36\1\0\1\36"+
    "\1\0\1\36\1\0\2\36\2\0\1\36\2\0\2\36"+
    "\1\0\4\36\1\0\3\36\1\0\17\36\1\0\2\36"+
    "\1\0\21\36\1\0\2\36\1\0\41\36\1\0\1\36"+
    "\1\0\2\36\2\0\1\36\1\0\1\36\1\0\1\36"+
    "\41\0\1\36\33\0\1\36\17\0\1\36\23\0\1\36"+
    "\32\0\1\36\41\0\1\36\7\0\1\36\63\0\1\36"+
    "\1\0\2\36\3\0\4\36\1\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\0\3\36\1\0\2\36\1\0\4\36"+
    "\1\0\3\36\1\0\10\36\1\0\6\36\1\0\2\36"+
    "\1\0\21\36\1\0\2\36\1\0\41\36\1\0\1\36"+
    "\1\0\2\36\2\0\1\36\1\0\1\36\1\0\1\36"+
    "\41\0\1\36\16\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"+
    "\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"+
    "\2\0\1\60\55\0\1\30\1\61\11\30\1\62\6\30"+
    "\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"+
    "\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"+
    "\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"+
    "\21\0\1\57\2\0\1\60\55\0\13\30\1\62\6\30"+
    "\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"+
    "\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\65\1\0\1\66\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\67\2\0\1\70"+
    "\4\0\1\71\3\0\1\72\17\0\1\55\2\0\1\73"+
    "\21\0\1\74\2\0\1\75\41\0\1\76\13\0\13\30"+
    "\1\77\6\30\2\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\32\3\0\1\30\1\77\1\32\1\100\3\0\1\77"+
    "\1\0\1\77\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\101\1\0\1\66\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\102\2\0\1\103"+
    "\4\0\1\71\3\0\1\104\17\0\1\55\2\0\1\105"+
    "\21\0\1\106\2\0\1\107\55\0\13\30\1\110\6\30"+
    "\2\0\3\30\1\0\3\30\1\0\2\30\1\32\3\0"+
    "\1\30\2\32\2\0\2\111\1\110\1\0\1\32\2\0"+
    "\1\30\233\0\1\37\23\0\1\112\21\0\1\113\2\0"+
    "\1\114\10\0\1\115\22\0\1\116\21\0\1\117\2\0"+
    "\1\120\41\0\1\121\26\0\1\62\27\0\1\34\1\0"+
    "\1\34\3\0\1\62\1\0\1\34\247\0\2\35\11\0"+
    "\1\122\21\0\1\123\2\0\1\124\10\0\1\125\22\0"+
    "\1\126\21\0\1\127\2\0\1\130\120\0\1\36\7\0"+
    "\1\36\11\0\1\131\21\0\1\132\2\0\1\133\10\0"+
    "\1\134\22\0\1\135\21\0\1\136\2\0\1\137\120\0"+
    "\1\37\7\0\1\37\4\0\1\41\1\0\1\42\2\0"+
    "\1\140\1\0\1\44\4\0\1\45\1\0\1\46\1\0"+
    "\1\47\2\0\1\50\3\0\1\141\2\0\1\142\4\0"+
    "\1\53\3\0\1\143\17\0\1\55\2\0\1\144\21\0"+
    "\1\145\2\0\1\146\55\0\13\30\1\62\6\30\1\63"+
    "\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"+
    "\1\30\1\40\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\40\2\0\1\40\7\0\1\30\4\0\1\30"+
    "\11\0\1\30\22\0\1\30\3\0\1\30\13\0\1\30"+
    "\2\0\1\30\10\0\1\30\12\0\4\30\45\0\1\30"+
    "\64\0\1\30\3\0\4\30\1\0\1\30\1\0\1\64"+
    "\2\0\1\30\1\0\2\30\2\0\2\30\2\0\3\30"+
    "\1\0\1\30\1\0\1\30\2\0\4\30\1\0\3\30"+
    "\1\0\1\30\1\0\3\30\1\0\2\30\1\0\4\30"+
    "\1\0\2\30\2\0\10\30\1\0\2\30\1\0\11\30"+
    "\1\0\10\30\1\0\13\30\1\64\1\0\1\30\1\0"+
    "\1\30\1\0\2\30\2\0\1\30\1\0\1\30\43\0"+
    "\1\30\17\0\1\30\26\0\2\30\23\0\1\64\1\30"+
    "\44\0\1\30\21\0\1\64\106\0\1\64\11\0\1\30"+
    "\15\0\4\30\2\0\2\30\14\0\4\30\1\0\2\30"+
    "\11\0\3\30\3\0\1\30\1\0\1\30\4\0\3\30"+
    "\5\0\4\30\2\0\2\30\12\0\4\64\1\0\2\30"+
    "\1\0\1\30\7\0\1\30\77\0\1\30\3\0\2\30"+
    "\12\0\2\30\1\0\3\30\7\0\1\30\6\0\2\30"+
    "\1\0\2\30\6\0\1\30\4\0\2\30\2\0\2\30"+
    "\5\0\3\30\10\0\1\30\16\0\1\30\4\0\2\64"+
    "\1\0\1\30\7\0\1\30\63\0\1\30\4\0\1\30"+
    "\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"+
    "\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"+
    "\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\30"+
    "\1\0\2\30\5\0\1\30\1\0\1\30\2\0\3\30"+
    "\1\0\1\30\7\0\1\30\1\0\1\30\66\0\1\30"+
    "\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"+
    "\31\0\20\30\5\0\3\30\3\0\1\30\3\0\2\30"+
    "\2\0\2\30\4\0\5\30\4\0\1\30\4\0\1\30"+
    "\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"+
    "\127\0\2\30\15\0\4\30\120\0\1\30\15\0\2\30"+
    "\10\0\2\30\1\0\1\30\1\0\1\30\11\0\1\30"+
    "\11\0\2\30\6\0\1\30\2\0\4\30\3\0\1\30"+
    "\2\0\2\30\1\0\3\30\5\0\1\30\1\0\2\30"+
    "\2\0\2\30\1\0\4\30\5\0\1\30\1\0\2\30"+
    "\77\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\2\30\1\147\10\30\1\62\6\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\150"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\151\2\0\1\152\4\0\1\53"+
    "\3\0\1\153\17\0\1\55\2\0\1\154\21\0\1\155"+
    "\2\0\1\156\41\0\1\76\13\0\13\30\1\62\6\30"+
    "\2\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"+
    "\1\30\1\62\1\64\1\100\3\0\1\62\1\0\1\62"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\157"+
    "\1\0\1\160\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\161\2\0\1\162\4\0\1\163"+
    "\3\0\1\164\17\0\1\55\2\0\1\165\21\0\1\166"+
    "\2\0\1\167\55\0\13\30\1\0\6\30\2\0\3\30"+
    "\1\0\3\30\1\0\2\30\4\0\1\30\1\63\7\0"+
    "\1\63\2\0\1\30\1\0\1\41\1\0\1\42\2\0"+
    "\1\170\1\0\1\44\4\0\1\45\1\0\1\46\1\0"+
    "\1\47\2\0\1\50\3\0\1\171\2\0\1\172\4\0"+
    "\1\53\3\0\1\173\17\0\1\55\2\0\1\174\21\0"+
    "\1\175\2\0\1\176\55\0\13\30\1\62\6\30\2\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\1\30"+
    "\2\64\2\0\2\177\1\62\1\0\1\64\2\0\1\30"+
    "\7\0\1\30\4\0\1\30\11\0\1\30\22\0\1\30"+
    "\3\0\1\30\13\0\1\77\2\0\1\77\10\0\1\30"+
    "\12\0\4\77\45\0\1\30\61\0\1\30\26\0\2\30"+
    "\23\0\1\32\1\30\44\0\1\77\21\0\1\32\106\0"+
    "\1\32\11\0\1\77\15\0\4\30\2\0\2\30\14\0"+
    "\3\30\1\77\1\0\2\77\11\0\3\30\3\0\1\30"+
    "\1\0\1\77\4\0\1\77\2\30\5\0\4\77\2\0"+
    "\1\30\1\77\12\0\4\32\1\0\2\30\1\0\1\77"+
    "\7\0\1\30\63\0\1\30\4\0\1\30\6\0\1\30"+
    "\3\0\1\30\6\0\1\30\5\0\1\30\2\0\2\30"+
    "\1\0\17\30\2\0\1\30\13\0\7\30\2\0\1\30"+
    "\1\0\1\30\1\0\1\30\2\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\1\30\4\0\1\77\1\0\2\30"+
    "\5\0\1\30\1\0\1\30\2\0\3\30\1\0\1\30"+
    "\7\0\1\30\1\0\1\30\66\0\1\30\6\0\1\30"+
    "\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"+
    "\5\0\3\30\3\0\1\30\3\0\2\30\2\0\2\30"+
    "\4\0\1\30\4\77\4\0\1\30\4\0\1\30\2\0"+
    "\1\30\4\0\1\30\1\0\1\30\41\0\1\30\127\0"+
    "\2\77\15\0\4\77\120\0\1\77\15\0\2\77\10\0"+
    "\2\77\1\0\1\77\1\0\1\77\11\0\1\77\11\0"+
    "\2\77\6\0\1\77\2\0\4\77\3\0\1\77\2\0"+
    "\2\77\1\0\3\77\5\0\1\77\1\0\2\77\2\0"+
    "\2\77\1\0\4\77\5\0\1\77\1\0\2\77\255\0"+
    "\1\100\77\0\1\200\21\0\1\201\2\0\1\202\10\0"+
    "\1\203\22\0\1\204\21\0\1\205\2\0\1\206\41\0"+
    "\1\76\26\0\1\62\27\0\1\100\1\0\1\100\3\0"+
    "\1\62\1\0\1\100\12\0\1\30\4\0\1\30\11\0"+
    "\1\30\22\0\1\30\3\0\1\30\13\0\1\32\2\0"+
    "\1\32\10\0\1\30\12\0\4\32\45\0\1\30\61\0"+
    "\1\30\26\0\2\30\23\0\1\32\1\30\44\0\1\32"+
    "\21\0\1\32\106\0\1\32\11\0\1\32\15\0\4\30"+
    "\2\0\2\30\14\0\3\30\1\32\1\0\2\32\11\0"+
    "\3\30\3\0\1\30\1\0\1\32\4\0\1\32\2\30"+
    "\5\0\4\32\2\0\1\30\1\32\12\0\4\32\1\0"+
    "\2\30\1\0\1\32\7\0\1\30\63\0\1\30\4\0"+
    "\1\30\6\0\1\30\3\0\1\30\6\0\1\30\5\0"+
    "\1\30\2\0\2\30\1\0\17\30\2\0\1\30\13\0"+
    "\7\30\2\0\1\30\1\0\1\30\1\0\1\30\2\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\1\30\4\0"+
    "\1\32\1\0\2\30\5\0\1\30\1\0\1\30\2\0"+
    "\3\30\1\0\1\30\7\0\1\30\1\0\1\30\66\0"+
    "\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"+
    "\1\30\31\0\20\30\5\0\3\30\3\0\1\30\3\0"+
    "\2\30\2\0\2\30\4\0\1\30\4\32\4\0\1\30"+
    "\4\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"+
    "\41\0\1\30\127\0\2\32\15\0\4\32\120\0\1\32"+
    "\15\0\2\32\10\0\2\32\1\0\1\32\1\0\1\32"+
    "\11\0\1\32\11\0\2\32\6\0\1\32\2\0\4\32"+
    "\3\0\1\32\2\0\2\32\1\0\3\32\5\0\1\32"+
    "\1\0\2\32\2\0\2\32\1\0\4\32\5\0\1\32"+
    "\1\0\2\32\77\0\1\41\1\0\1\42\2\0\1\207"+
    "\1\0\1\66\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\210\2\0\1\211\4\0\1\71"+
    "\3\0\1\212\17\0\1\55\2\0\1\213\21\0\1\214"+
    "\2\0\1\215\41\0\1\76\13\0\13\30\1\110\6\30"+
    "\2\0\3\30\1\0\3\30\1\0\2\30\1\32\3\0"+
    "\1\30\1\110\1\32\1\100\3\0\1\110\1\0\1\110"+
    "\2\0\1\30\6\0\1\216\1\0\1\217\17\0\1\220"+
    "\2\0\1\221\4\0\1\222\3\0\1\223\22\0\1\224"+
    "\21\0\1\225\2\0\1\226\113\0\1\32\4\0\1\111"+
    "\1\32\6\0\1\111\74\0\1\34\2\0\1\34\23\0"+
    "\4\34\251\0\1\34\142\0\1\34\44\0\1\34\1\0"+
    "\2\34\21\0\1\34\4\0\1\34\7\0\4\34\3\0"+
    "\1\34\22\0\1\34\226\0\1\34\255\0\4\34\215\0"+
    "\2\34\15\0\4\34\120\0\1\34\15\0\2\34\10\0"+
    "\2\34\1\0\1\34\1\0\1\34\11\0\1\34\11\0"+
    "\2\34\6\0\1\34\2\0\4\34\3\0\1\34\2\0"+
    "\2\34\1\0\3\34\5\0\1\34\1\0\2\34\2\0"+
    "\2\34\1\0\4\34\5\0\1\34\1\0\2\34\255\0"+
    "\1\34\162\0\1\36\2\0\1\36\23\0\4\36\251\0"+
    "\1\36\142\0\1\36\44\0\1\36\1\0\2\36\21\0"+
    "\1\36\4\0\1\36\7\0\4\36\3\0\1\36\22\0"+
    "\1\36\226\0\1\36\255\0\4\36\215\0\2\36\15\0"+
    "\4\36\120\0\1\36\15\0\2\36\10\0\2\36\1\0"+
    "\1\36\1\0\1\36\11\0\1\36\11\0\2\36\6\0"+
    "\1\36\2\0\4\36\3\0\1\36\2\0\2\36\1\0"+
    "\3\36\5\0\1\36\1\0\2\36\2\0\2\36\1\0"+
    "\4\36\5\0\1\36\1\0\2\36\167\0\1\37\2\0"+
    "\1\37\23\0\4\37\251\0\1\37\142\0\1\37\44\0"+
    "\1\37\1\0\2\37\21\0\1\37\4\0\1\37\7\0"+
    "\4\37\3\0\1\37\22\0\1\37\226\0\1\37\255\0"+
    "\4\37\215\0\2\37\15\0\4\37\120\0\1\37\15\0"+
    "\2\37\10\0\2\37\1\0\1\37\1\0\1\37\11\0"+
    "\1\37\11\0\2\37\6\0\1\37\2\0\4\37\3\0"+
    "\1\37\2\0\2\37\1\0\3\37\5\0\1\37\1\0"+
    "\2\37\2\0\2\37\1\0\4\37\5\0\1\37\1\0"+
    "\2\37\105\0\1\30\4\0\1\30\11\0\1\30\22\0"+
    "\1\30\3\0\1\30\13\0\1\40\2\0\1\40\10\0"+
    "\1\30\12\0\4\40\45\0\1\30\61\0\1\30\26\0"+
    "\2\30\23\0\1\64\1\30\44\0\1\40\21\0\1\64"+
    "\106\0\1\64\11\0\1\40\15\0\4\30\2\0\2\30"+
    "\14\0\3\30\1\40\1\0\2\40\11\0\3\30\3\0"+
    "\1\30\1\0\1\40\4\0\1\40\2\30\5\0\4\40"+
    "\2\0\1\30\1\40\12\0\4\64\1\0\2\30\1\0"+
    "\1\40\7\0\1\30\63\0\1\30\4\0\1\30\6\0"+
    "\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"+
    "\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"+
    "\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\4\0\1\40\1\0"+
    "\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"+
    "\1\30\7\0\1\30\1\0\1\30\66\0\1\30\6\0"+
    "\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"+
    "\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"+
    "\2\30\4\0\1\30\4\40\4\0\1\30\4\0\1\30"+
    "\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"+
    "\127\0\2\40\15\0\4\40\120\0\1\40\15\0\2\40"+
    "\10\0\2\40\1\0\1\40\1\0\1\40\11\0\1\40"+
    "\11\0\2\40\6\0\1\40\2\0\4\40\3\0\1\40"+
    "\2\0\2\40\1\0\3\40\5\0\1\40\1\0\2\40"+
    "\2\0\2\40\1\0\4\40\5\0\1\40\1\0\2\40"+
    "\77\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\3\30\1\227\7\30\1\62\6\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\7\0\1\30\4\0\1\30\11\0\1\30"+
    "\22\0\1\30\3\0\1\30\13\0\1\62\2\0\1\62"+
    "\10\0\1\30\12\0\4\62\45\0\1\30\61\0\1\30"+
    "\26\0\2\30\23\0\1\64\1\30\44\0\1\62\21\0"+
    "\1\64\106\0\1\64\11\0\1\62\15\0\4\30\2\0"+
    "\2\30\14\0\3\30\1\62\1\0\2\62\11\0\3\30"+
    "\3\0\1\30\1\0\1\62\4\0\1\62\2\30\5\0"+
    "\4\62\2\0\1\30\1\62\12\0\4\64\1\0\2\30"+
    "\1\0\1\62\7\0\1\30\63\0\1\30\4\0\1\30"+
    "\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"+
    "\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"+
    "\2\0\1\30\1\0\1\30\1\0\1\30\2\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\62"+
    "\1\0\2\30\5\0\1\30\1\0\1\30\2\0\3\30"+
    "\1\0\1\30\7\0\1\30\1\0\1\30\66\0\1\30"+
    "\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"+
    "\31\0\20\30\5\0\3\30\3\0\1\30\3\0\2\30"+
    "\2\0\2\30\4\0\1\30\4\62\4\0\1\30\4\0"+
    "\1\30\2\0\1\30\4\0\1\30\1\0\1\30\41\0"+
    "\1\30\127\0\2\62\15\0\4\62\120\0\1\62\15\0"+
    "\2\62\10\0\2\62\1\0\1\62\1\0\1\62\11\0"+
    "\1\62\11\0\2\62\6\0\1\62\2\0\4\62\3\0"+
    "\1\62\2\0\2\62\1\0\3\62\5\0\1\62\1\0"+
    "\2\62\2\0\2\62\1\0\4\62\5\0\1\62\1\0"+
    "\2\62\105\0\1\30\4\0\1\30\11\0\1\30\22\0"+
    "\1\30\3\0\1\30\13\0\1\63\2\0\1\63\10\0"+
    "\1\30\12\0\4\63\45\0\1\30\64\0\1\30\3\0"+
    "\4\30\1\0\1\30\4\0\1\30\1\0\2\30\2\0"+
    "\2\30\2\0\3\30\1\0\1\30\1\0\1\30\2\0"+
    "\4\30\1\0\3\30\1\0\1\30\1\0\3\30\1\0"+
    "\2\30\1\0\4\30\1\0\2\30\2\0\10\30\1\0"+
    "\2\30\1\0\11\30\1\0\10\30\1\0\13\30\2\0"+
    "\1\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"+
    "\1\30\43\0\1\30\17\0\1\30\26\0\2\30\24\0"+
    "\1\30\44\0\1\63\142\0\1\63\15\0\4\30\2\0"+
    "\2\30\14\0\3\30\1\63\1\0\2\63\11\0\3\30"+
    "\3\0\1\30\1\0\1\63\4\0\1\63\2\30\5\0"+
    "\4\63\2\0\1\30\1\63\17\0\2\30\1\0\1\63"+
    "\7\0\1\30\77\0\1\30\3\0\2\30\12\0\2\30"+
    "\1\0\3\30\7\0\1\30\6\0\2\30\1\0\2\30"+
    "\6\0\1\30\4\0\2\30\2\0\2\30\5\0\3\30"+
    "\10\0\1\30\16\0\1\30\7\0\1\30\7\0\1\30"+
    "\63\0\1\30\4\0\1\30\6\0\1\30\3\0\1\30"+
    "\6\0\1\30\5\0\1\30\2\0\2\30\1\0\17\30"+
    "\2\0\1\30\13\0\7\30\2\0\1\30\1\0\1\30"+
    "\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\1\30\4\0\1\63\1\0\2\30\5\0\1\30"+
    "\1\0\1\30\2\0\3\30\1\0\1\30\7\0\1\30"+
    "\1\0\1\30\66\0\1\30\6\0\1\30\3\0\1\30"+
    "\3\0\1\30\7\0\1\30\31\0\20\30\5\0\3\30"+
    "\3\0\1\30\3\0\2\30\2\0\2\30\4\0\1\30"+
    "\4\63\4\0\1\30\4\0\1\30\2\0\1\30\4\0"+
    "\1\30\1\0\1\30\41\0\1\30\127\0\2\63\15\0"+
    "\4\63\120\0\1\63\15\0\2\63\10\0\2\63\1\0"+
    "\1\63\1\0\1\63\11\0\1\63\11\0\2\63\6\0"+
    "\1\63\2\0\4\63\3\0\1\63\2\0\2\63\1\0"+
    "\3\63\5\0\1\63\1\0\2\63\2\0\2\63\1\0"+
    "\4\63\5\0\1\63\1\0\2\63\105\0\1\30\4\0"+
    "\1\30\11\0\1\30\22\0\1\30\3\0\1\30\13\0"+
    "\1\64\2\0\1\64\10\0\1\30\12\0\4\64\45\0"+
    "\1\30\61\0\1\30\26\0\2\30\23\0\1\64\1\30"+
    "\44\0\1\64\21\0\1\64\106\0\1\64\11\0\1\64"+
    "\15\0\4\30\2\0\2\30\14\0\3\30\1\64\1\0"+
    "\2\64\11\0\3\30\3\0\1\30\1\0\1\64\4\0"+
    "\1\64\2\30\5\0\4\64\2\0\1\30\1\64\12\0"+
    "\4\64\1\0\2\30\1\0\1\64\7\0\1\30\63\0"+
    "\1\30\4\0\1\30\6\0\1\30\3\0\1\30\6\0"+
    "\1\30\5\0\1\30\2\0\2\30\1\0\17\30\2\0"+
    "\1\30\13\0\7\30\2\0\1\30\1\0\1\30\1\0"+
    "\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\4\0\1\64\1\0\2\30\5\0\1\30\1\0"+
    "\1\30\2\0\3\30\1\0\1\30\7\0\1\30\1\0"+
    "\1\30\66\0\1\30\6\0\1\30\3\0\1\30\3\0"+
    "\1\30\7\0\1\30\31\0\20\30\5\0\3\30\3\0"+
    "\1\30\3\0\2\30\2\0\2\30\4\0\1\30\4\64"+
    "\4\0\1\30\4\0\1\30\2\0\1\30\4\0\1\30"+
    "\1\0\1\30\41\0\1\30\127\0\2\64\15\0\4\64"+
    "\120\0\1\64\15\0\2\64\10\0\2\64\1\0\1\64"+
    "\1\0\1\64\11\0\1\64\11\0\2\64\6\0\1\64"+
    "\2\0\4\64\3\0\1\64\2\0\2\64\1\0\3\64"+
    "\5\0\1\64\1\0\2\64\2\0\2\64\1\0\4\64"+
    "\5\0\1\64\1\0\2\64\104\0\1\230\1\0\1\231"+
    "\17\0\1\232\2\0\1\233\4\0\1\234\3\0\1\235"+
    "\22\0\1\236\21\0\1\237\2\0\1\240\113\0\1\64"+
    "\4\0\1\177\1\64\6\0\1\177\74\0\1\100\2\0"+
    "\1\100\23\0\4\100\251\0\1\100\142\0\1\100\44\0"+
    "\1\100\1\0\2\100\21\0\1\100\4\0\1\100\7\0"+
    "\4\100\3\0\1\100\22\0\1\100\226\0\1\100\255\0"+
    "\4\100\215\0\2\100\15\0\4\100\120\0\1\100\15\0"+
    "\2\100\10\0\2\100\1\0\1\100\1\0\1\100\11\0"+
    "\1\100\11\0\2\100\6\0\1\100\2\0\4\100\3\0"+
    "\1\100\2\0\2\100\1\0\3\100\5\0\1\100\1\0"+
    "\2\100\2\0\2\100\1\0\4\100\5\0\1\100\1\0"+
    "\2\100\105\0\1\30\4\0\1\30\11\0\1\30\22\0"+
    "\1\30\3\0\1\30\13\0\1\110\2\0\1\110\10\0"+
    "\1\30\12\0\4\110\45\0\1\30\61\0\1\30\26\0"+
    "\2\30\23\0\1\32\1\30\44\0\1\110\21\0\1\32"+
    "\106\0\1\32\11\0\1\110\15\0\4\30\2\0\2\30"+
    "\14\0\3\30\1\110\1\0\2\110\11\0\3\30\3\0"+
    "\1\30\1\0\1\110\4\0\1\110\2\30\5\0\4\110"+
    "\2\0\1\30\1\110\12\0\4\32\1\0\2\30\1\0"+
    "\1\110\7\0\1\30\63\0\1\30\4\0\1\30\6\0"+
    "\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"+
    "\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"+
    "\1\30\1\0\1\30\1\0\1\30\2\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\4\0\1\110\1\0"+
    "\2\30\5\0\1\30\1\0\1\30\2\0\3\30\1\0"+
    "\1\30\7\0\1\30\1\0\1\30\66\0\1\30\6\0"+
    "\1\30\3\0\1\30\3\0\1\30\7\0\1\30\31\0"+
    "\20\30\5\0\3\30\3\0\1\30\3\0\2\30\2\0"+
    "\2\30\4\0\1\30\4\110\4\0\1\30\4\0\1\30"+
    "\2\0\1\30\4\0\1\30\1\0\1\30\41\0\1\30"+
    "\127\0\2\110\15\0\4\110\120\0\1\110\15\0\2\110"+
    "\10\0\2\110\1\0\1\110\1\0\1\110\11\0\1\110"+
    "\11\0\2\110\6\0\1\110\2\0\4\110\3\0\1\110"+
    "\2\0\2\110\1\0\3\110\5\0\1\110\1\0\2\110"+
    "\2\0\2\110\1\0\4\110\5\0\1\110\1\0\2\110"+
    "\167\0\1\111\2\0\1\111\23\0\4\111\145\0\1\32"+
    "\132\0\1\32\153\0\1\32\45\0\1\111\21\0\1\32"+
    "\106\0\1\32\11\0\1\111\44\0\1\111\1\0\2\111"+
    "\21\0\1\111\4\0\1\111\7\0\4\111\3\0\1\111"+
    "\12\0\4\32\4\0\1\111\245\0\2\32\230\0\1\111"+
    "\255\0\4\111\215\0\2\111\15\0\4\111\120\0\1\111"+
    "\15\0\2\111\10\0\2\111\1\0\1\111\1\0\1\111"+
    "\11\0\1\111\11\0\2\111\6\0\1\111\2\0\4\111"+
    "\3\0\1\111\2\0\2\111\1\0\3\111\5\0\1\111"+
    "\1\0\2\111\2\0\2\111\1\0\4\111\5\0\1\111"+
    "\1\0\2\111\77\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"+
    "\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"+
    "\2\0\1\60\55\0\4\30\1\241\6\30\1\62\6\30"+
    "\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"+
    "\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\30\2\0\1\30\71\0\1\177\2\0\1\177"+
    "\23\0\4\177\145\0\1\64\132\0\1\64\153\0\1\64"+
    "\45\0\1\177\21\0\1\64\106\0\1\64\11\0\1\177"+
    "\44\0\1\177\1\0\2\177\21\0\1\177\4\0\1\177"+
    "\7\0\4\177\3\0\1\177\12\0\4\64\4\0\1\177"+
    "\245\0\2\64\230\0\1\177\255\0\4\177\215\0\2\177"+
    "\15\0\4\177\120\0\1\177\15\0\2\177\10\0\2\177"+
    "\1\0\1\177\1\0\1\177\11\0\1\177\11\0\2\177"+
    "\6\0\1\177\2\0\4\177\3\0\1\177\2\0\2\177"+
    "\1\0\3\177\5\0\1\177\1\0\2\177\2\0\2\177"+
    "\1\0\4\177\5\0\1\177\1\0\2\177\77\0\1\41"+
    "\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"+
    "\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"+
    "\2\0\1\56\21\0\1\57\2\0\1\60\55\0\5\30"+
    "\1\242\5\30\1\62\6\30\1\63\1\0\3\30\1\0"+
    "\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"+
    "\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"+
    "\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\6\30\1\243\4\30\1\62\6\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"+
    "\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"+
    "\2\0\1\60\55\0\7\30\1\244\3\30\1\62\6\30"+
    "\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"+
    "\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"+
    "\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"+
    "\21\0\1\57\2\0\1\60\55\0\10\30\1\245\2\30"+
    "\1\62\6\30\1\63\1\0\3\30\1\0\3\30\1\0"+
    "\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"+
    "\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"+
    "\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"+
    "\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"+
    "\2\0\1\56\21\0\1\57\2\0\1\60\55\0\11\30"+
    "\1\246\1\30\1\62\6\30\1\63\1\0\3\30\1\0"+
    "\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"+
    "\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"+
    "\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\12\30\1\247\1\62\6\30\1\63\1\0\3\30"+
    "\1\0\3\30\1\0\2\30\1\64\3\0\2\30\1\64"+
    "\1\0\1\63\1\0\1\63\1\62\1\0\1\30\2\0"+
    "\1\30\1\0\1\41\1\0\1\42\2\0\1\43\1\0"+
    "\1\44\4\0\1\45\1\0\1\46\1\0\1\47\2\0"+
    "\1\50\3\0\1\51\2\0\1\52\4\0\1\53\3\0"+
    "\1\54\17\0\1\55\2\0\1\56\21\0\1\57\2\0"+
    "\1\60\55\0\11\30\1\250\1\30\1\62\6\30\1\63"+
    "\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"+
    "\2\30\1\64\1\0\1\63\1\0\1\63\1\62\1\0"+
    "\1\30\2\0\1\30\1\0\1\41\1\0\1\42\2\0"+
    "\1\43\1\0\1\44\4\0\1\45\1\0\1\46\1\0"+
    "\1\47\2\0\1\50\3\0\1\51\2\0\1\52\4\0"+
    "\1\53\3\0\1\54\17\0\1\55\2\0\1\56\21\0"+
    "\1\57\2\0\1\60\55\0\13\30\1\251\6\30\1\63"+
    "\1\0\3\30\1\0\3\30\1\0\2\30\1\64\3\0"+
    "\2\30\1\64\1\0\1\63\1\0\1\63\1\62\1\0"+
    "\1\30\2\0\1\30\1\0\1\41\1\0\1\42\2\0"+
    "\1\150\1\0\1\44\4\0\1\45\1\0\1\46\1\0"+
    "\1\47\2\0\1\50\3\0\1\151\2\0\1\152\4\0"+
    "\1\53\3\0\1\153\17\0\1\55\2\0\1\154\21\0"+
    "\1\155\2\0\1\156\41\0\1\76\13\0\13\30\1\62"+
    "\1\252\5\30\2\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\64\3\0\1\30\1\62\1\64\1\100\3\0\1\62"+
    "\1\0\1\62\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"+
    "\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"+
    "\21\0\1\57\2\0\1\60\55\0\13\30\1\62\1\30"+
    "\1\253\4\30\1\63\1\0\3\30\1\0\3\30\1\0"+
    "\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"+
    "\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"+
    "\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"+
    "\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"+
    "\2\0\1\56\21\0\1\57\2\0\1\60\55\0\13\30"+
    "\1\62\1\30\1\254\4\30\1\63\1\0\3\30\1\0"+
    "\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"+
    "\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"+
    "\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\13\30\1\62\2\30\1\255\3\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"+
    "\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"+
    "\2\0\1\60\55\0\13\30\1\256\6\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\150"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\151\2\0\1\152\4\0\1\53"+
    "\3\0\1\153\17\0\1\55\2\0\1\154\21\0\1\155"+
    "\2\0\1\156\41\0\1\76\13\0\13\30\1\62\1\30"+
    "\1\257\4\30\2\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\64\3\0\1\30\1\62\1\64\1\100\3\0\1\62"+
    "\1\0\1\62\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"+
    "\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"+
    "\21\0\1\57\2\0\1\60\55\0\1\260\12\30\1\62"+
    "\6\30\1\63\1\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"+
    "\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"+
    "\1\42\2\0\1\43\1\0\1\44\4\0\1\45\1\0"+
    "\1\46\1\0\1\47\2\0\1\50\3\0\1\51\2\0"+
    "\1\52\4\0\1\53\3\0\1\54\17\0\1\55\2\0"+
    "\1\56\21\0\1\57\2\0\1\60\55\0\13\30\1\62"+
    "\1\261\5\30\1\63\1\0\3\30\1\0\3\30\1\0"+
    "\2\30\1\64\3\0\2\30\1\64\1\0\1\63\1\0"+
    "\1\63\1\62\1\0\1\30\2\0\1\30\1\0\1\41"+
    "\1\0\1\42\2\0\1\43\1\0\1\44\4\0\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\3\0\1\51"+
    "\2\0\1\52\4\0\1\53\3\0\1\54\17\0\1\55"+
    "\2\0\1\56\21\0\1\57\2\0\1\60\55\0\13\30"+
    "\1\62\3\30\1\262\2\30\1\63\1\0\3\30\1\0"+
    "\3\30\1\0\2\30\1\64\3\0\2\30\1\64\1\0"+
    "\1\63\1\0\1\63\1\62\1\0\1\30\2\0\1\30"+
    "\1\0\1\41\1\0\1\42\2\0\1\43\1\0\1\44"+
    "\4\0\1\45\1\0\1\46\1\0\1\47\2\0\1\50"+
    "\3\0\1\51\2\0\1\52\4\0\1\53\3\0\1\54"+
    "\17\0\1\55\2\0\1\56\21\0\1\57\2\0\1\60"+
    "\55\0\13\30\1\62\1\30\1\263\4\30\1\63\1\0"+
    "\3\30\1\0\3\30\1\0\2\30\1\64\3\0\2\30"+
    "\1\64\1\0\1\63\1\0\1\63\1\62\1\0\1\30"+
    "\2\0\1\30\1\0\1\41\1\0\1\42\2\0\1\43"+
    "\1\0\1\44\4\0\1\45\1\0\1\46\1\0\1\47"+
    "\2\0\1\50\3\0\1\51\2\0\1\52\4\0\1\53"+
    "\3\0\1\54\17\0\1\55\2\0\1\56\21\0\1\57"+
    "\2\0\1\60\55\0\13\30\1\62\4\30\1\264\1\30"+
    "\1\63\1\0\3\30\1\0\3\30\1\0\2\30\1\64"+
    "\3\0\2\30\1\64\1\0\1\63\1\0\1\63\1\62"+
    "\1\0\1\30\2\0\1\30\1\0\1\41\1\0\1\42"+
    "\2\0\1\43\1\0\1\44\4\0\1\45\1\0\1\46"+
    "\1\0\1\47\2\0\1\50\3\0\1\51\2\0\1\52"+
    "\4\0\1\53\3\0\1\54\17\0\1\55\2\0\1\56"+
    "\21\0\1\57\2\0\1\60\55\0\13\30\1\62\5\30"+
    "\1\265\1\63\1\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"+
    "\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"+
    "\1\42\2\0\1\43\1\0\1\44\4\0\1\45\1\0"+
    "\1\46\1\0\1\47\2\0\1\50\3\0\1\51\2\0"+
    "\1\52\4\0\1\53\3\0\1\54\17\0\1\55\2\0"+
    "\1\56\21\0\1\57\2\0\1\60\55\0\13\30\1\62"+
    "\6\30\1\266\1\0\3\30\1\0\3\30\1\0\2\30"+
    "\1\64\3\0\2\30\1\64\1\0\1\63\1\0\1\63"+
    "\1\62\1\0\1\30\2\0\1\30\1\0\1\41\1\0"+
    "\1\42\2\0\1\157\1\0\1\160\4\0\1\45\1\0"+
    "\1\46\1\0\1\47\2\0\1\50\3\0\1\161\2\0"+
    "\1\162\4\0\1\163\3\0\1\164\17\0\1\55\2\0"+
    "\1\165\21\0\1\166\2\0\1\167\55\0\13\30\1\0"+
    "\6\30\1\0\1\267\3\30\1\0\3\30\1\0\2\30"+
    "\4\0\1\30\1\63\7\0\1\63\2\0\1\30\216\0"+
    "\1\270\251\0\1\271\224\0\1\272\275\0\1\273\226\0"+
    "\1\274\52\0\221\275\1\0\27\275\176\0\1\276\274\0"+
    "\1\277\222\0\1\300\277\0\1\301\224\0\1\302\244\0"+
    "\1\303\277\0\1\304\252\0\1\305\251\0\1\306\251\0"+
    "\1\307\230\0\1\310\271\0\1\311\236\0\1\312\263\0"+
    "\1\313\251\0\1\314\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32617];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\20\0\2\1\1\0\1\1\13\0"+
    "\1\1\7\0\1\1\36\0\1\1\57\0\1\1\11\0"+
    "\25\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /** Alphanumeric sequences */
  public static final int WORD_TYPE = StandardTokenizer.ALPHANUM;
  
  /** Numbers */
  public static final int NUMERIC_TYPE = StandardTokenizer.NUM;
  
  /**
   * Chars in class \p{Line_Break = Complex_Context} are from South East Asian
   * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept 
   * together as as a single token rather than broken up, because the logic
   * required to break them at word boundaries is too complex for UAX#29.
   * <p>
   * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA
   */
  public static final int SOUTH_EAST_ASIAN_TYPE = StandardTokenizer.SOUTHEAST_ASIAN;
  
  public static final int IDEOGRAPHIC_TYPE = StandardTokenizer.IDEOGRAPHIC;
  
  public static final int HIRAGANA_TYPE = StandardTokenizer.HIRAGANA;
  
  public static final int KATAKANA_TYPE = StandardTokenizer.KATAKANA;
  
  public static final int HANGUL_TYPE = StandardTokenizer.HANGUL;

  public final int yychar()
  {
    return yychar;
  }

  /**
   * Fills CharTermAttribute with the current token text.
   */
  public final void getText(CharTermAttribute t) {
    t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StandardTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2932) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return WORD_TYPE;
          }
        case 9: break;
        case 5: 
          { return SOUTH_EAST_ASIAN_TYPE;
          }
        case 10: break;
        case 4: 
          { return KATAKANA_TYPE;
          }
        case 11: break;
        case 6: 
          { return IDEOGRAPHIC_TYPE;
          }
        case 12: break;
        case 8: 
          { return HANGUL_TYPE;
          }
        case 13: break;
        case 3: 
          { return NUMERIC_TYPE;
          }
        case 14: break;
        case 7: 
          { return HIRAGANA_TYPE;
          }
        case 15: break;
        case 1: 
          { /* Break so we don't hit fall-through warning: */ break; /* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return StandardTokenizerInterface.YYEOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
